[{"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\index.js":"1","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\App.js":"2","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\store\\index.js":"4","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\index.js":"5","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\common\\jsTPS.js":"6","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\api\\index.js":"7","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\ListSelector.js":"8","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\Banner.js":"9","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\EditToolbar.js":"10","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\ListCard.js":"11","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\SongCard.js":"12","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\Statusbar.js":"13","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\PlaylistCards.js":"14","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\DeleteListModal.js":"15","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\DeleteSongModal.js":"16","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\EditSongModal.js":"17","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\AddSong_Transaction.js":"18","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\DeleteSong_Transaction.js":"19","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\MoveSong_Transaction.js":"20","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\EditSong_Transaction.js":"21"},{"size":908,"mtime":1665424346963,"results":"22","hashOfConfig":"23"},{"size":860,"mtime":1665782603135,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1665424346964,"results":"25","hashOfConfig":"23"},{"size":14394,"mtime":1665792436223,"results":"26","hashOfConfig":"23"},{"size":526,"mtime":1665710432785,"results":"27","hashOfConfig":"23"},{"size":6687,"mtime":1665424346957,"results":"28","hashOfConfig":"23"},{"size":1544,"mtime":1665549909153,"results":"29","hashOfConfig":"23"},{"size":1212,"mtime":1665783355996,"results":"30","hashOfConfig":"23"},{"size":465,"mtime":1665424346958,"results":"31","hashOfConfig":"23"},{"size":1732,"mtime":1665791325899,"results":"32","hashOfConfig":"23"},{"size":3157,"mtime":1665785661281,"results":"33","hashOfConfig":"23"},{"size":2794,"mtime":1665713137386,"results":"34","hashOfConfig":"23"},{"size":487,"mtime":1665424346962,"results":"35","hashOfConfig":"23"},{"size":1333,"mtime":1665787035428,"results":"36","hashOfConfig":"23"},{"size":1749,"mtime":1665785128369,"results":"37","hashOfConfig":"23"},{"size":1621,"mtime":1665722272932,"results":"38","hashOfConfig":"23"},{"size":3085,"mtime":1665721208188,"results":"39","hashOfConfig":"23"},{"size":691,"mtime":1665788790035,"results":"40","hashOfConfig":"23"},{"size":630,"mtime":1665712805621,"results":"41","hashOfConfig":"23"},{"size":708,"mtime":1665712904763,"results":"42","hashOfConfig":"23"},{"size":707,"mtime":1665783970805,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"9h5l0m",{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\index.js",[],["90","91"],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\App.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\store\\index.js",["92"],"import { createContext, useState } from 'react';\r\nimport jsTPS, { jsTPS_Transaction } from '../common/jsTPS';\r\nimport api from '../api';\r\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\r\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\r\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\r\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n  CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\r\n  CLOSE_CURRENT_LIST: 'CLOSE_CURRENT_LIST',\r\n  CREATE_NEW_LIST: 'CREATE_NEW_LIST',\r\n  LOAD_ID_NAME_PAIRS: 'LOAD_ID_NAME_PAIRS',\r\n  SET_CURRENT_LIST: 'SET_CURRENT_LIST',\r\n  SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\r\n  SELECT_LIST_TO_DELETE: 'SELECT_LIST_TO_DELETE',\r\n  SELECT_SONG: 'SELECT_SONG',\r\n};\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n  const [store, setStore] = useState({\r\n    idNamePairs: [],\r\n    currentList: null,\r\n    newListCounter: 0,\r\n    listNameActive: false,\r\n    selectedListId: '',\r\n    selectedSongIdx: -1,\r\n    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n  });\r\n\r\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n  // HANDLE EVERY TYPE OF STATE CHANGE\r\n  const storeReducer = (action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n      // LIST UPDATE OF ITS NAME\r\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n        return setStore({\r\n          idNamePairs: payload.idNamePairs,\r\n          currentList: payload.playlist,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      // STOP EDITING THE CURRENT LIST\r\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      // CREATE A NEW LIST\r\n      case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter + 1,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n        return setStore({\r\n          idNamePairs: payload,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      // PREPARE TO DELETE A LIST\r\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      // UPDATE A LIST\r\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      // START EDITING A LIST NAME\r\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: true,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      // SELECT LIST TO DELETE\r\n      case GlobalStoreActionType.SELECT_LIST_TO_DELETE: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: payload,\r\n          selectedSongIdx: -1,\r\n          selectedSong: { title: '', artist: '', youTubeId: '' },\r\n        });\r\n      }\r\n      case GlobalStoreActionType.SELECT_SONG: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: payload.idx,\r\n          selectedSong: payload.song,\r\n        });\r\n      }\r\n      default:\r\n        return store;\r\n    }\r\n  };\r\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\r\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n  store.changeListName = function (id, newName) {\r\n    // GET THE LIST\r\n    async function asyncChangeListName(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playlist;\r\n        playlist.name = newName;\r\n        async function updateList(playlist) {\r\n          response = await api.updatePlaylistById(playlist._id, playlist);\r\n          if (response.data.success) {\r\n            async function getListPairs(playlist) {\r\n              response = await api.getPlaylistPairs();\r\n              if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                  payload: {\r\n                    idNamePairs: pairsArray,\r\n                    playlist: playlist,\r\n                  },\r\n                });\r\n              }\r\n            }\r\n            getListPairs(playlist);\r\n          }\r\n        }\r\n        updateList(playlist);\r\n      }\r\n    }\r\n    asyncChangeListName(id);\r\n  };\r\n\r\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n  store.closeCurrentList = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n      payload: {},\r\n    });\r\n    tps.clearAllTransactions();\r\n  };\r\n\r\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n  store.loadIdNamePairs = function () {\r\n    async function asyncLoadIdNamePairs() {\r\n      const response = await api.getPlaylistPairs();\r\n      if (response.data.success) {\r\n        let pairsArray = response.data.idNamePairs;\r\n        storeReducer({\r\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n          payload: pairsArray,\r\n        });\r\n      } else {\r\n        console.log('API FAILED TO GET THE LIST PAIRS');\r\n      }\r\n    }\r\n    asyncLoadIdNamePairs();\r\n  };\r\n\r\n  store.setCurrentList = function (id) {\r\n    async function asyncSetCurrentList(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playlist;\r\n\r\n        if (response.data.success) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n            payload: playlist,\r\n          });\r\n          store.history.push('/playlist/' + playlist._id);\r\n        }\r\n      }\r\n    }\r\n    asyncSetCurrentList(id);\r\n  };\r\n  store.getPlaylistSize = function () {\r\n    return store.currentList.songs.length;\r\n  };\r\n  store.undo = function () {\r\n    tps.undoTransaction();\r\n  };\r\n  store.redo = function () {\r\n    tps.doTransaction();\r\n  };\r\n\r\n  store.canUndo = () => {\r\n    return tps.hasTransactionToUndo();\r\n  };\r\n  store.canRedo = () => {\r\n    return tps.hasTransactionToRedo();\r\n  };\r\n  store.hasCurrentList = () => {\r\n    return store.currentList !== null;\r\n  };\r\n  store.getPlaylistNameById = (id) => {\r\n    const idNamePairs = store.idNamePairs;\r\n    const name = idNamePairs.filter((item) => {\r\n      return item._id === id;\r\n    })[0].name;\r\n    return name;\r\n  };\r\n\r\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n  store.setListNameActive = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n      payload: null,\r\n    });\r\n  };\r\n\r\n  // THIS FUNCTION ADDS A NEW PLAYLIST\r\n  store.createNewList = () => {\r\n    const playlist = { name: 'untitled', songs: [] };\r\n    const asyncCreateNewList = async () => {\r\n      const response = await api.createPlaylist(playlist);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playlist;\r\n\r\n        if (response.data.success) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n            payload: playlist,\r\n          });\r\n          store.history.push('/playlist/' + playlist._id);\r\n        }\r\n      }\r\n    };\r\n    asyncCreateNewList();\r\n  };\r\n\r\n  store.selectListToDelete = (id) => {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SELECT_LIST_TO_DELETE,\r\n      payload: id,\r\n    });\r\n  };\r\n\r\n  store.deletePlaylist = (id) => {\r\n    // GET THE LIST\r\n    async function asyncDeletePlaylist(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      let playlist = response.data.playlist;\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n          payload: {},\r\n        });\r\n        async function deleteList(playlist) {\r\n          response = await api.deletePlaylistById(playlist._id);\r\n          store.loadIdNamePairs();\r\n        }\r\n        deleteList(playlist);\r\n      }\r\n    }\r\n    asyncDeletePlaylist(id);\r\n  };\r\n\r\n  store.moveSong = (start, end) => {\r\n    const list = store.currentList;\r\n    if (start < end) {\r\n      let temp = list.songs[start];\r\n      for (let i = start; i < end; i++) {\r\n        list.songs[i] = list.songs[i + 1];\r\n      }\r\n      list.songs[end] = temp;\r\n    } else if (start > end) {\r\n      let temp = list.songs[start];\r\n      for (let i = start; i > end; i--) {\r\n        list.songs[i] = list.songs[i - 1];\r\n      }\r\n      list.songs[end] = temp;\r\n    }\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: list,\r\n        });\r\n      }\r\n    }\r\n\r\n    asyncUpdatePlaylist(list);\r\n  };\r\n\r\n  store.addMoveSongTransaction = (initOldSongIndex, initNewSongIndex) => {\r\n    const transaction = new MoveSong_Transaction(\r\n      store,\r\n      initOldSongIndex,\r\n      initNewSongIndex\r\n    );\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.selectSong = (idx) => {\r\n    const song = store.currentList.songs[idx];\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SELECT_SONG,\r\n      payload: { idx: idx, song: song },\r\n    });\r\n  };\r\n\r\n  store.deleteSong = (idx) => {\r\n    const list = store.currentList;\r\n    const removedSong = list.songs.splice(idx, 1)[0];\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: list,\r\n        });\r\n      }\r\n    }\r\n\r\n    asyncUpdatePlaylist(list);\r\n    return removedSong;\r\n  };\r\n\r\n  store.addDeleteSongTransaction = (idx) => {\r\n    let transaction = new DeleteSong_Transaction(store, idx);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.addSong = (songIdx, song) => {\r\n    const list = store.currentList;\r\n    if (store.selectedSongIdx !== -1) list.songs.splice(songIdx, 0, song);\r\n    else list.songs.push(song);\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: list,\r\n        });\r\n      }\r\n    }\r\n\r\n    asyncUpdatePlaylist(list);\r\n  };\r\n\r\n  store.addAddSongTransaction = () => {\r\n    let transaction = new AddSong_Transaction(store);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.editSong = (songIdx, editedSong) => {\r\n    const list = store.currentList;\r\n    let song = list.songs[songIdx];\r\n    song.title = editedSong.title;\r\n    song.artist = editedSong.artist;\r\n    song.youTubeId = editedSong.youTubeId;\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: list,\r\n        });\r\n      }\r\n    }\r\n    asyncUpdatePlaylist(list);\r\n  };\r\n\r\n  store.addEditSongTransaction = (editedSong) => {\r\n    const uneditedSong = store.currentList.songs[store.selectedSongIdx];\r\n    const uneditedSongClone = {\r\n      title: uneditedSong.title,\r\n      artist: uneditedSong.artist,\r\n      youTubeId: uneditedSong.youTubeId,\r\n    };\r\n    const transaction = new EditSong_Transaction(\r\n      store,\r\n      store.selectedSongIdx,\r\n      uneditedSongClone,\r\n      editedSong\r\n    );\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n  return { store, storeReducer };\r\n};\r\n","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\index.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\common\\jsTPS.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\api\\index.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\ListSelector.js",["93"],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\Banner.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\EditToolbar.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\ListCard.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\SongCard.js",["94","95"],"import React, { useContext, useState } from 'react';\r\nimport { GlobalStoreContext } from '../store';\r\n\r\nfunction SongCard(props) {\r\n  const { store } = useContext(GlobalStoreContext);\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [draggedTo, setDraggedTo] = useState(false);\r\n\r\n  const handleDragStart = (event) => {\r\n    event.dataTransfer.setData('song', event.target.id);\r\n    setIsDragging(true);\r\n  };\r\n  const handleDragOver = (event) => {\r\n    event.preventDefault();\r\n    setDraggedTo(true);\r\n  };\r\n  const handleDragEnter = (event) => {\r\n    event.preventDefault();\r\n    setDraggedTo(true);\r\n  };\r\n  const handleDragLeave = (event) => {\r\n    event.preventDefault();\r\n    setDraggedTo(false);\r\n  };\r\n\r\n  const handleDrop = (event) => {\r\n    event.preventDefault();\r\n    let target = event.target;\r\n    let targetId = target.id;\r\n    targetId = targetId.substring(target.id.indexOf('-') + 1);\r\n    let sourceId = event.dataTransfer.getData('song');\r\n    sourceId = sourceId.substring(sourceId.indexOf('-') + 1);\r\n\r\n    setIsDragging(false);\r\n    setDraggedTo(false);\r\n    // ASK THE MODEL TO MOVE THE DATA\r\n    store.addMoveSongTransaction(parseInt(sourceId), parseInt(targetId));\r\n  };\r\n\r\n  const handleDeleteSong = (event) => {\r\n    event.preventDefault();\r\n    const showDeleteSongModal = () => {\r\n      let modal = document.getElementById('delete-song-modal');\r\n      modal.classList.add('is-visible');\r\n    };\r\n    store.selectSong(index);\r\n    showDeleteSongModal();\r\n  };\r\n\r\n  const handleEditSong = (event) => {\r\n    event.preventDefault();\r\n    // THIS FUNCTION SHOWS THE MODAL FOR PROMPTING THE USER\r\n    // TO SEE IF THEY REALLY WANT TO EDIT THE SONG\r\n    const showEditSongModal = () => {\r\n      let modal = document.getElementById('edit-song-modal');\r\n      modal.classList.add('is-visible');\r\n    };\r\n    store.selectSong(index);\r\n    showEditSongModal();\r\n  };\r\n\r\n  const { song, index } = props;\r\n  let cardClass = 'list-card unselected-list-card';\r\n  return (\r\n    <div\r\n      key={index}\r\n      id={'song-' + index}\r\n      className={cardClass}\r\n      onDragStart={handleDragStart}\r\n      onDragOver={handleDragOver}\r\n      onDragEnter={handleDragEnter}\r\n      onDragLeave={handleDragLeave}\r\n      onDrop={handleDrop}\r\n      draggable='true'\r\n      onDoubleClick={handleEditSong}\r\n    >\r\n      {index + 1}.\r\n      <a\r\n        id={'song-' + index + '-link'}\r\n        className='song-link'\r\n        href={'https://www.youtube.com/watch?v=' + song.youTubeId}\r\n      >\r\n        {song.title} by {song.artist}\r\n      </a>\r\n      <input\r\n        type='button'\r\n        id={'remove-song-' + index}\r\n        className='list-card-button'\r\n        value={'\\u2715'}\r\n        onClick={handleDeleteSong}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SongCard;\r\n","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\Statusbar.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\PlaylistCards.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\DeleteListModal.js",["96"],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\DeleteSongModal.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\components\\EditSongModal.js",["97"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { __RouterContext } from 'react-router';\r\nimport { GlobalStoreContext } from '../store';\r\n\r\nconst EditSongModal = () => {\r\n  const { store } = useContext(GlobalStoreContext);\r\n  const [title, setTitle] = useState('');\r\n  const [artist, setArtist] = useState('');\r\n  const [youTubeId, setYouTubeId] = useState('');\r\n\r\n  // THIS FUNCTION IS FOR HIDING THE MODAL\r\n  const hideEditSongModal = () => {\r\n    let modal = document.getElementById('edit-song-modal');\r\n    modal.classList.remove('is-visible');\r\n  };\r\n  const handleEditSong = () => {\r\n    let editedSong = { title: title, artist: artist, youTubeId: youTubeId };\r\n    store.addEditSongTransaction(editedSong);\r\n    setTitle('');\r\n    setArtist('');\r\n    setYouTubeId('');\r\n    hideEditSongModal();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTitle(store.selectedSong.title);\r\n    setArtist(store.selectedSong.artist);\r\n    setYouTubeId(store.selectedSong.youTubeId);\r\n  }, [store.selectedSong]);\r\n\r\n  return (\r\n    <div class='modal' id='edit-song-modal' data-animation='slideInOutLeft'>\r\n      <div class='modal-root' id='verify-edit-song-root'>\r\n        <div class='modal-north'>Edit Song</div>\r\n        <div class='modal-center'>\r\n          <div class='modal-center-content'>\r\n            <div class='edit-song-modal-row'>\r\n              <span class='modal-label'>Title:</span>\r\n              <input\r\n                type='text'\r\n                id='edit-song-title-form'\r\n                class='modal-form'\r\n                value={title}\r\n                placeholder=''\r\n                onChange={(event) => setTitle(event.target.value)}\r\n              />\r\n            </div>\r\n            <div class='edit-song-modal-row'>\r\n              <span class='modal-label'>Artist:</span>\r\n              <input\r\n                type='text'\r\n                id='edit-song-artist-form'\r\n                class='modal-form'\r\n                value={artist}\r\n                placeholder=''\r\n                onChange={(event) => setArtist(event.target.value)}\r\n              />\r\n            </div>\r\n            <div class='edit-song-modal-row'>\r\n              <span class='modal-label'>YouTubeId:</span>\r\n              <input\r\n                type='text'\r\n                id='edit-song-youTubeId-form'\r\n                class='modal-form'\r\n                value={youTubeId}\r\n                placeholder=''\r\n                onChange={(event) => setYouTubeId(event.target.value)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class='modal-south'>\r\n          <input\r\n            type='button'\r\n            id='edit-song-confirm-button'\r\n            class='modal-button'\r\n            value='Confirm'\r\n            onClick={handleEditSong}\r\n          />\r\n          <input\r\n            type='button'\r\n            id='edit-song-cancel-button'\r\n            class='modal-button'\r\n            value='Cancel'\r\n            onClick={hideEditSongModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditSongModal;\r\n","C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\AddSong_Transaction.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\DeleteSong_Transaction.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\MoveSong_Transaction.js",[],"C:\\Users\\Min\\Documents\\CSE 316\\Homework\\CSE_316_Playlister_HW3\\client\\src\\transactions\\EditSong_Transaction.js",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":2,"column":17,"nodeType":"104","messageId":"105","endLine":2,"endColumn":34},{"ruleId":"106","severity":1,"message":"107","line":16,"column":6,"nodeType":"108","endLine":16,"endColumn":8,"suggestions":"109"},{"ruleId":"102","severity":1,"message":"110","line":6,"column":10,"nodeType":"104","messageId":"105","endLine":6,"endColumn":20},{"ruleId":"102","severity":1,"message":"111","line":7,"column":10,"nodeType":"104","messageId":"105","endLine":7,"endColumn":19},{"ruleId":"106","severity":1,"message":"107","line":24,"column":6,"nodeType":"108","endLine":24,"endColumn":28,"suggestions":"112"},{"ruleId":"102","severity":1,"message":"113","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":25},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'jsTPS_Transaction' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["116"],"'isDragging' is assigned a value but never used.","'draggedTo' is assigned a value but never used.",["117"],"'__RouterContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [store]",{"range":"122","text":"123"},"Update the dependencies array to be: [store, store.selectedListId]",{"range":"124","text":"125"},[468,470],"[store]",[740,762],"[store, store.selectedListId]"]