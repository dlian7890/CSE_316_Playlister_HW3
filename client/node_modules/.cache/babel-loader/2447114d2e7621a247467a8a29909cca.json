{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS, { jsTPS_Transaction } from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\n  CLOSE_CURRENT_LIST: 'CLOSE_CURRENT_LIST',\n  CREATE_NEW_LIST: 'CREATE_NEW_LIST',\n  LOAD_ID_NAME_PAIRS: 'LOAD_ID_NAME_PAIRS',\n  SET_CURRENT_LIST: 'SET_CURRENT_LIST',\n  SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\n  SELECT_LIST_TO_DELETE: 'SELECT_LIST_TO_DELETE',\n  SELECT_SONG: 'SELECT_SONG',\n  SELECTED_SONG: null\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n  _s();\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    selectedListId: '',\n    selectedSongIdx: -1\n  });\n\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIdx: -1\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIdx: -1\n          });\n        }\n      // CREATE A NEW LIST\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIdx: -1\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIdx: -1\n          });\n        }\n      // PREPARE TO DELETE A LIST\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIdx: -1\n          });\n        }\n      // UPDATE A LIST\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIdx: -1\n          });\n        }\n      // START EDITING A LIST NAME\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            selectedListId: '',\n            selectedSongIdx: -1\n          });\n        }\n      // SELECT LIST TO DELETE\n      case GlobalStoreActionType.SELECT_LIST_TO_DELETE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: payload,\n            selectedSongIdx: -1\n          });\n        }\n      case GlobalStoreActionType.SELECT_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIdx: payload\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log('API FAILED TO GET THE LIST PAIRS');\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push('/playlist/' + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n  store.setListNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  // THIS FUNCTION ADDS A NEW PLAYLIST\n  store.createNewList = () => {\n    const playlist = {\n      name: 'untitled',\n      songs: []\n    };\n    const asyncCreateNewList = async () => {\n      const response = await api.createPlaylist(playlist);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push('/playlist/' + playlist._id);\n        }\n      }\n    };\n    asyncCreateNewList();\n  };\n  store.selectListToDelete = id => {\n    storeReducer({\n      type: GlobalStoreActionType.SELECT_LIST_TO_DELETE,\n      payload: id\n    });\n  };\n  store.deletePlaylist = id => {\n    // GET THE LIST\n    async function asyncDeletePlaylist(id) {\n      let response = await api.getPlaylistById(id);\n      let playlist = response.data.playlist;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {}\n        });\n        async function deleteList(playlist) {\n          response = await api.deletePlaylistById(playlist._id);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        deleteList(playlist);\n      }\n    }\n    asyncDeletePlaylist(id);\n  };\n  store.moveSong = (start, end) => {\n    const list = store.currentList;\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.playlist\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  store.addMoveSongTransaction = (initOldSongIndex, initNewSongIndex) => {\n    const transaction = new MoveSong_Transaction(store, initOldSongIndex, initNewSongIndex);\n    tps.addTransaction(transaction);\n  };\n  store.selectSong = idx => {\n    storeReducer({\n      type: GlobalStoreActionType.SELECT_SONG,\n      payload: idx\n    });\n  };\n  store.deleteSong = idx => {\n    const list = store.currentList;\n    const removedSong = list.songs.splice(idx, 1)[0];\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.playlist\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n    return removedSong;\n  };\n  store.addDeleteSongTransaction = idx => {\n    let transaction = new DeleteSong_Transaction(store, idx);\n    tps.addTransaction(transaction);\n  };\n  store.addSong = (songIdx, song) => {\n    const list = store.currentList;\n    list.songs.splice(songIdx, 0, song);\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.playlist\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  store.addAddSongTransaction = () => {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n  store.editSong = (songIdx, editedSong) => {\n    const list = store.currentList;\n    let song = list.songs[songIdx];\n    song.title = editedSong.title;\n    song.artist = editedSong.artist;\n    song.youTubeId = editedSong.youTubeId;\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: response.data.playlist\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  store.addEditSongTransaction = editedSong => {\n    const uneditedSong = store.currentList.songs[store.selectedSongIdx];\n    const uneditedSongClone = {\n      title: uneditedSong.title,\n      artist: uneditedSong.artist,\n      youTubeId: uneditedSong.youTubeId\n    };\n    const transaction = new EditSong_Transaction(store, store.selectedSongIdx, uneditedSongClone, editedSong);\n    tps.addTransaction(transaction);\n  };\n\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"LxrzkAN2eR7ew/3tJt1VlD5P4o0=\");","map":{"version":3,"names":["createContext","useState","jsTPS","jsTPS_Transaction","api","AddSong_Transaction","DeleteSong_Transaction","MoveSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SELECT_LIST_TO_DELETE","SELECT_SONG","SELECTED_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","selectedListId","selectedSongIdx","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setListNameActive","createNewList","asyncCreateNewList","createPlaylist","selectListToDelete","deletePlaylist","asyncDeletePlaylist","deleteList","deletePlaylistById","moveSong","start","end","list","temp","i","asyncUpdatePlaylist","addMoveSongTransaction","initOldSongIndex","initNewSongIndex","transaction","addTransaction","selectSong","idx","deleteSong","removedSong","splice","addDeleteSongTransaction","addSong","songIdx","song","addAddSongTransaction","editSong","editedSong","title","artist","youTubeId","addEditSongTransaction","uneditedSong","uneditedSongClone"],"sources":["C:/Users/Min/Documents/CSE 316/Homework/CSE_316_Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react';\r\nimport jsTPS, { jsTPS_Transaction } from '../common/jsTPS';\r\nimport api from '../api';\r\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\r\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\r\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\r\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n  CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\r\n  CLOSE_CURRENT_LIST: 'CLOSE_CURRENT_LIST',\r\n  CREATE_NEW_LIST: 'CREATE_NEW_LIST',\r\n  LOAD_ID_NAME_PAIRS: 'LOAD_ID_NAME_PAIRS',\r\n  SET_CURRENT_LIST: 'SET_CURRENT_LIST',\r\n  SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\r\n  SELECT_LIST_TO_DELETE: 'SELECT_LIST_TO_DELETE',\r\n  SELECT_SONG: 'SELECT_SONG',\r\n  SELECTED_SONG: null\r\n};\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n  const [store, setStore] = useState({\r\n    idNamePairs: [],\r\n    currentList: null,\r\n    newListCounter: 0,\r\n    listNameActive: false,\r\n    selectedListId: '',\r\n    selectedSongIdx: -1,\r\n  });\r\n\r\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n  // HANDLE EVERY TYPE OF STATE CHANGE\r\n  const storeReducer = (action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n      // LIST UPDATE OF ITS NAME\r\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n        return setStore({\r\n          idNamePairs: payload.idNamePairs,\r\n          currentList: payload.playlist,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      // STOP EDITING THE CURRENT LIST\r\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      // CREATE A NEW LIST\r\n      case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter + 1,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n        return setStore({\r\n          idNamePairs: payload,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      // PREPARE TO DELETE A LIST\r\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      // UPDATE A LIST\r\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      // START EDITING A LIST NAME\r\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: true,\r\n          selectedListId: '',\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      // SELECT LIST TO DELETE\r\n      case GlobalStoreActionType.SELECT_LIST_TO_DELETE: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: payload,\r\n          selectedSongIdx: -1,\r\n        });\r\n      }\r\n      case GlobalStoreActionType.SELECT_SONG: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          selectedListId: '',\r\n          selectedSongIdx: payload,\r\n        });\r\n      }\r\n      default:\r\n        return store;\r\n    }\r\n  };\r\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\r\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n  store.changeListName = function (id, newName) {\r\n    // GET THE LIST\r\n    async function asyncChangeListName(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playlist;\r\n        playlist.name = newName;\r\n        async function updateList(playlist) {\r\n          response = await api.updatePlaylistById(playlist._id, playlist);\r\n          if (response.data.success) {\r\n            async function getListPairs(playlist) {\r\n              response = await api.getPlaylistPairs();\r\n              if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                  payload: {\r\n                    idNamePairs: pairsArray,\r\n                    playlist: playlist,\r\n                  },\r\n                });\r\n              }\r\n            }\r\n            getListPairs(playlist);\r\n          }\r\n        }\r\n        updateList(playlist);\r\n      }\r\n    }\r\n    asyncChangeListName(id);\r\n  };\r\n\r\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n  store.closeCurrentList = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n      payload: {},\r\n    });\r\n  };\r\n\r\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n  store.loadIdNamePairs = function () {\r\n    async function asyncLoadIdNamePairs() {\r\n      const response = await api.getPlaylistPairs();\r\n      if (response.data.success) {\r\n        let pairsArray = response.data.idNamePairs;\r\n        storeReducer({\r\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n          payload: pairsArray,\r\n        });\r\n      } else {\r\n        console.log('API FAILED TO GET THE LIST PAIRS');\r\n      }\r\n    }\r\n    asyncLoadIdNamePairs();\r\n  };\r\n\r\n  store.setCurrentList = function (id) {\r\n    async function asyncSetCurrentList(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playlist;\r\n\r\n        if (response.data.success) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n            payload: playlist,\r\n          });\r\n          store.history.push('/playlist/' + playlist._id);\r\n        }\r\n      }\r\n    }\r\n    asyncSetCurrentList(id);\r\n  };\r\n  store.getPlaylistSize = function () {\r\n    return store.currentList.songs.length;\r\n  };\r\n  store.undo = function () {\r\n    tps.undoTransaction();\r\n  };\r\n  store.redo = function () {\r\n    tps.doTransaction();\r\n  };\r\n\r\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n  store.setListNameActive = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n      payload: null,\r\n    });\r\n  };\r\n\r\n  // THIS FUNCTION ADDS A NEW PLAYLIST\r\n  store.createNewList = () => {\r\n    const playlist = { name: 'untitled', songs: [] };\r\n    const asyncCreateNewList = async () => {\r\n      const response = await api.createPlaylist(playlist);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playlist;\r\n\r\n        if (response.data.success) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n            payload: playlist,\r\n          });\r\n          store.history.push('/playlist/' + playlist._id);\r\n        }\r\n      }\r\n    };\r\n    asyncCreateNewList();\r\n  };\r\n\r\n  store.selectListToDelete = (id) => {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SELECT_LIST_TO_DELETE,\r\n      payload: id,\r\n    });\r\n  };\r\n\r\n  store.deletePlaylist = (id) => {\r\n    // GET THE LIST\r\n    async function asyncDeletePlaylist(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      let playlist = response.data.playlist;\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n          payload: {},\r\n        });\r\n        async function deleteList(playlist) {\r\n          response = await api.deletePlaylistById(playlist._id);\r\n          if (response.data.success) {\r\n            async function getListPairs(playlist) {\r\n              response = await api.getPlaylistPairs();\r\n              if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                  payload: {\r\n                    idNamePairs: pairsArray,\r\n                    playlist: playlist,\r\n                  },\r\n                });\r\n              }\r\n            }\r\n            getListPairs(playlist);\r\n          }\r\n        }\r\n        deleteList(playlist);\r\n      }\r\n    }\r\n    asyncDeletePlaylist(id);\r\n  };\r\n\r\n  store.moveSong = (start, end) => {\r\n    const list = store.currentList;\r\n    if (start < end) {\r\n      let temp = list.songs[start];\r\n      for (let i = start; i < end; i++) {\r\n        list.songs[i] = list.songs[i + 1];\r\n      }\r\n      list.songs[end] = temp;\r\n    } else if (start > end) {\r\n      let temp = list.songs[start];\r\n      for (let i = start; i > end; i--) {\r\n        list.songs[i] = list.songs[i - 1];\r\n      }\r\n      list.songs[end] = temp;\r\n    }\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: response.data.playlist,\r\n        });\r\n      }\r\n    }\r\n\r\n    asyncUpdatePlaylist(list);\r\n  };\r\n\r\n  store.addMoveSongTransaction = (initOldSongIndex, initNewSongIndex) => {\r\n    const transaction = new MoveSong_Transaction(\r\n      store,\r\n      initOldSongIndex,\r\n      initNewSongIndex\r\n    );\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.selectSong = (idx) => {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SELECT_SONG,\r\n      payload: idx,\r\n    });\r\n  };\r\n\r\n  store.deleteSong = (idx) => {\r\n    const list = store.currentList;\r\n    const removedSong = list.songs.splice(idx, 1)[0];\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: response.data.playlist,\r\n        });\r\n      }\r\n    }\r\n\r\n    asyncUpdatePlaylist(list);\r\n    return removedSong;\r\n  };\r\n\r\n  store.addDeleteSongTransaction = (idx) => {\r\n    let transaction = new DeleteSong_Transaction(store, idx);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.addSong = (songIdx, song) => {\r\n    const list = store.currentList;\r\n    list.songs.splice(songIdx, 0, song);\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: response.data.playlist,\r\n        });\r\n      }\r\n    }\r\n\r\n    asyncUpdatePlaylist(list);\r\n  };\r\n\r\n  store.addAddSongTransaction = () => {\r\n    let transaction = new AddSong_Transaction(store);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.editSong = (songIdx, editedSong) => {\r\n    const list = store.currentList;\r\n    let song = list.songs[songIdx];\r\n    song.title = editedSong.title;\r\n    song.artist = editedSong.artist;\r\n    song.youTubeId = editedSong.youTubeId;\r\n    async function asyncUpdatePlaylist(playlist) {\r\n      let response = await api.updatePlaylistById(playlist._id, playlist);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n          payload: response.data.playlist,\r\n        });\r\n      }\r\n    }\r\n    asyncUpdatePlaylist(list);\r\n  };\r\n\r\n  store.addEditSongTransaction = (editedSong) => {\r\n    const uneditedSong = store.currentList.songs[store.selectedSongIdx];\r\n    const uneditedSongClone = {\r\n      title: uneditedSong.title,\r\n      artist: uneditedSong.artist,\r\n      youTubeId: uneditedSong.youTubeId,\r\n    };\r\n    const transaction = new EditSong_Transaction(\r\n      store,\r\n      store.selectedSongIdx,\r\n      uneditedSongClone,\r\n      editedSong\r\n    );\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n  return { store, storeReducer };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}