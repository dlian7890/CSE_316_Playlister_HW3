{"ast":null,"code":"/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we're using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it's a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\n\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:4000/api'\n});\n\n// THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\nexport const getAllPlaylists = () => api.get(`/playlists`);\nexport const getPlaylistPairs = () => api.get('playlistpairs');\nexport const getPlaylistById = id => api.get(`/playlist/${id}`);\nexport const createPlaylist = payload => api.post('playlist', payload);\nexport const deletePlaylistById = id => api.delete('playlist/${id}');\nconst apis = {\n  getAllPlaylists,\n  getPlaylistPairs,\n  getPlaylistById,\n  createPlaylist\n};\nexport default apis;","map":{"version":3,"names":["axios","api","create","baseURL","getAllPlaylists","get","getPlaylistPairs","getPlaylistById","id","createPlaylist","payload","post","deletePlaylistById","delete","apis"],"sources":["C:/Users/Min/Documents/CSE 316/Homework/CSE_316_Playlister_HW3/client/src/api/index.js"],"sourcesContent":["/*\r\n    This is our http api, which we use to send requests to\r\n    our back-end API. Note we're using the Axios library\r\n    for doing this, which is an easy to use AJAX-based\r\n    library. We could (and maybe should) use Fetch, which\r\n    is a native (to browsers) standard, but Axios is easier\r\n    to use when sending JSON back and forth and it's a Promise-\r\n    based API which helps a lot with asynchronous communication.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\nimport axios from 'axios';\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:4000/api',\r\n});\r\n\r\n// THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\r\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\r\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\r\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\r\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\r\n// CUSTOM FILTERS FOR QUERIES\r\nexport const getAllPlaylists = () => api.get(`/playlists`);\r\nexport const getPlaylistPairs = () => api.get('playlistpairs');\r\nexport const getPlaylistById = (id) => api.get(`/playlist/${id}`);\r\nexport const createPlaylist = (payload) => api.post('playlist', payload);\r\nexport const deletePlaylistById = (id) => api.delete('playlist/${id}');\r\n\r\nconst apis = {\r\n  getAllPlaylists,\r\n  getPlaylistPairs,\r\n  getPlaylistById,\r\n  createPlaylist,\r\n};\r\n\r\nexport default apis;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAE,YAAW,CAAC;AAC1D,OAAO,MAAMC,gBAAgB,GAAG,MAAML,GAAG,CAACI,GAAG,CAAC,eAAe,CAAC;AAC9D,OAAO,MAAME,eAAe,GAAIC,EAAE,IAAKP,GAAG,CAACI,GAAG,CAAE,aAAYG,EAAG,EAAC,CAAC;AACjE,OAAO,MAAMC,cAAc,GAAIC,OAAO,IAAKT,GAAG,CAACU,IAAI,CAAC,UAAU,EAAED,OAAO,CAAC;AACxE,OAAO,MAAME,kBAAkB,GAAIJ,EAAE,IAAKP,GAAG,CAACY,MAAM,CAAC,gBAAgB,CAAC;AAEtE,MAAMC,IAAI,GAAG;EACXV,eAAe;EACfE,gBAAgB;EAChBC,eAAe;EACfE;AACF,CAAC;AAED,eAAeK,IAAI"},"metadata":{},"sourceType":"module"}